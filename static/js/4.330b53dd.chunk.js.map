{"version":3,"sources":["features/transactions/TransactionForm.tsx"],"names":["formItemProps","marginTop","TransactionForm","currency","useSelector","selectCurrency","dispatch","useDispatch","useState","name","setName","amount","setAmount","dueDayNumber","setDueDayNumber","isDistributedDaily","setIsDistributedDaily","type","setType","marginBottom","onSubmit","event","preventDefault","roundedAmount","toFixed","addTransaction","Math","abs","as","display","size","htmlFor","id","isRequired","onChange","target","value","placeholder","symbol","flex","marginRight","max","Number","MAX_SAFE_INTEGER","min","whiteSpace","isDisabled","nextDayNumber","isNaN","range","map","dayNumber","key","isChecked","checked","variantColor","variant"],"mappings":"0UA8BMA,EAAgB,CACpBC,UAAW,CAAC,OAAQ,OAAQ,SAGjBC,EAAyC,WACpD,IAAMC,EAAWC,YAAYC,KACvBC,EAAWC,cAFyC,EAIlCC,mBAjBL,IAauC,mBAInDC,EAJmD,KAI7CC,EAJ6C,OAK9BF,mBAjBP,IAYqC,mBAKnDG,EALmD,KAK3CC,EAL2C,OAMlBJ,mBAjBX,GAW6B,mBAMnDK,EANmD,KAMrCC,EANqC,OAONN,oBAjBjB,GAUuB,mBAOnDO,EAPmD,KAO/BC,EAP+B,OAQlCR,mBAjBgB,YASkB,mBAQnDS,EARmD,KAQ7CC,EAR6C,KAU1D,OACE,kBAAC,IAAD,CAAKC,aAAc,CAAC,OAAQ,OAAQ,IAClC,0BACEC,SAAU,SAACC,GACTA,EAAMC,iBAEN,IAAMC,GAAiBZ,EAAOa,QAAQ,GAEtClB,EACEmB,YAAe,CACbd,OAAiB,aAATM,EAAsBM,GAAiBG,KAAKC,IAAIJ,GACxDV,aAAcE,EAAqB,KAAOF,EAC1CE,qBACAN,OACAQ,UAIJL,EAxCa,IAyCbE,EAxCqB,GAyCrBE,GAxC2B,GAyC3BN,EA5CW,IA6CXQ,EAzCgC,cA4ClC,kBAAC,IAAD,CAASU,GAAG,KAAKC,QAAS,CAAC,OAAQ,OAAQ,SAAUC,KAAK,MAA1D,mBAGA,kBAAC,IAAgB9B,EACf,kBAAC,IAAD,CAAW+B,QA9CW,2BA8CtB,SACA,kBAAC,IAAD,CACEC,GA/CoB,0BAgDpBC,YAAU,EAEVC,SAAU,YAAuB,IAApBC,EAAmB,EAAnBA,OACXzB,EAAQyB,EAAOC,QAEjBC,YAAY,0BACZpB,KAAK,OACLmB,MAAO3B,KAGX,kBAAC,IAAgBT,EACf,kBAAC,IAAD,CAAW+B,QA3DW,2BA2DtB,SACA,kBAAC,IAAD,CACEC,GA7DoB,0BA8DpBE,SAAU,YAAuB,IAApBC,EAAmB,EAAnBA,OACXjB,EAAQiB,EAAOC,QAEjBA,MAAOnB,GAEP,4BAAQmB,MAAO,YAAf,YACA,4BAAQA,MAAO,YAAf,cAGJ,kBAAC,IAAgBpC,EACf,kBAAC,IAAD,kBAAsBG,EAASmC,OAA/B,KACA,kBAAC,IAAD,CAAKT,QAAQ,QACX,kBAAC,IAAD,CACEU,KAAM,EACNC,YAAY,OACZC,IAAKC,OAAOC,iBACZC,IAAK,IAELV,SAAU,SAACvB,GACTC,EAAUD,IAEZyB,MAAOzB,GAEP,kBAAC,IAAD,OAEF,kBAAC,IAAD,CAAgBkC,WAAW,UAA3B,iBAGJ,kBAAC,IAAgB7C,EACf,kBAAC,IAAD,oBACA,kBAAC,IAAD,CACE8C,WAAY/B,EACZmB,SAAU,YAAuB,IACzBa,GADwB,EAAnBZ,OAC6DC,MAEpEY,MAAMD,IAIVjC,EAAgBiC,IAElBX,MAAOvB,GAENoC,YAAM,EAAG,IAAIC,KAAI,SAAAC,GAAS,OACzB,4BAAQC,IAAKD,EAAWf,MAAOe,GAC5BA,QAKT,kBAAC,IAAD,eAAatB,QAAQ,QAAW7B,GAC9B,kBAAC,IAAD,qCACA,kBAAC,IAAD,CACEqD,UAAWtC,EACXmB,SAAU,YAAuB,IAApBC,EAAmB,EAAnBA,OACXnB,EAAsBmB,EAAOmB,UAE/BC,aAAa,iBAGjB,kBAAC,IAAD,eAAQtC,KAAK,SAASuC,QAAQ,UAAUD,aAAa,eAAkBvD,GAAvE","file":"static/js/4.330b53dd.chunk.js","sourcesContent":["import React, { FunctionComponent, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { range } from 'ramda';\nimport {\n  Box,\n  Button,\n  Checkbox,\n  FormControl,\n  FormHelperText,\n  FormLabel,\n  Heading,\n  Input,\n  NumberInput,\n  NumberInputField,\n  Select,\n} from '@chakra-ui/core';\n\nimport { addTransaction, selectCurrency } from './transactionsSlice';\n\nimport { Transaction } from './types';\n\nconst DEFAULT_NAME = '';\nconst DEFAULT_AMOUNT = 10;\nconst DEFAULT_DUE_DAY_NUMBER = 1;\nconst DEFAULT_IS_DISTRIBUTED_DAILY = false;\nconst DEFAULT_TYPE: Transaction['type'] = 'outgoing';\n\nconst TRANSACTION_NAME_SELECT = 'transaction-name-select';\nconst TRANSACTION_TYPE_SELECT = 'transaction-type-select';\n\nconst formItemProps = {\n  marginTop: ['1rem', '1rem', '2rem'],\n};\n\nexport const TransactionForm: FunctionComponent<{}> = () => {\n  const currency = useSelector(selectCurrency);\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState(DEFAULT_NAME);\n  const [amount, setAmount] = useState(DEFAULT_AMOUNT);\n  const [dueDayNumber, setDueDayNumber] = useState(DEFAULT_DUE_DAY_NUMBER);\n  const [isDistributedDaily, setIsDistributedDaily] = useState(DEFAULT_IS_DISTRIBUTED_DAILY);\n  const [type, setType] = useState<Transaction['type']>(DEFAULT_TYPE);\n\n  return (\n    <Box marginBottom={['2rem', '2rem', 0]}>\n      <form\n        onSubmit={(event): void => {\n          event.preventDefault();\n\n          const roundedAmount = +amount.toFixed(2);\n\n          dispatch(\n            addTransaction({\n              amount: type === 'incoming' ? roundedAmount : -Math.abs(roundedAmount),\n              dueDayNumber: isDistributedDaily ? null : dueDayNumber,\n              isDistributedDaily,\n              name,\n              type,\n            }),\n          );\n\n          setAmount(DEFAULT_AMOUNT);\n          setDueDayNumber(DEFAULT_DUE_DAY_NUMBER);\n          setIsDistributedDaily(DEFAULT_IS_DISTRIBUTED_DAILY);\n          setName(DEFAULT_NAME);\n          setType(DEFAULT_TYPE);\n        }}\n      >\n        <Heading as='h3' display={['none', 'none', 'block']} size='md'>\n          Add transaction\n        </Heading>\n        <FormControl {...formItemProps}>\n          <FormLabel htmlFor={TRANSACTION_NAME_SELECT}>Name:</FormLabel>\n          <Input\n            id={TRANSACTION_TYPE_SELECT}\n            isRequired\n            // @ts-ignore\n            onChange={({ target }): void => {\n              setName(target.value);\n            }}\n            placeholder='e.g. \"Electricity Bill\"'\n            type='text'\n            value={name}\n          />\n        </FormControl>\n        <FormControl {...formItemProps}>\n          <FormLabel htmlFor={TRANSACTION_TYPE_SELECT}>Type:</FormLabel>\n          <Select\n            id={TRANSACTION_TYPE_SELECT}\n            onChange={({ target }): void => {\n              setType(target.value as Transaction['type']);\n            }}\n            value={type}\n          >\n            <option value={'incoming'}>Incoming</option>\n            <option value={'outgoing'}>Outgoing</option>\n          </Select>\n        </FormControl>\n        <FormControl {...formItemProps}>\n          <FormLabel>Amount in {currency.symbol}:</FormLabel>\n          <Box display='flex'>\n            <NumberInput\n              flex={1}\n              marginRight='2rem'\n              max={Number.MAX_SAFE_INTEGER}\n              min={0.01}\n              // @ts-ignore\n              onChange={(amount: number): void => {\n                setAmount(amount);\n              }}\n              value={amount}\n            >\n              <NumberInputField />\n            </NumberInput>\n            <FormHelperText whiteSpace='nowrap'>e.g. 119.99</FormHelperText>\n          </Box>\n        </FormControl>\n        <FormControl {...formItemProps}>\n          <FormLabel>Due on day:</FormLabel>\n          <Select\n            isDisabled={isDistributedDaily}\n            onChange={({ target }): void => {\n              const nextDayNumber: NonNullable<Transaction['dueDayNumber']> = +target.value;\n\n              if (isNaN(nextDayNumber)) {\n                return;\n              }\n\n              setDueDayNumber(nextDayNumber);\n            }}\n            value={dueDayNumber}\n          >\n            {range(1, 32).map(dayNumber => (\n              <option key={dayNumber} value={dayNumber}>\n                {dayNumber}\n              </option>\n            ))}\n          </Select>\n        </FormControl>\n        <FormControl display='flex' {...formItemProps}>\n          <FormLabel>Distribute over whole month:</FormLabel>\n          <Checkbox\n            isChecked={isDistributedDaily}\n            onChange={({ target }): void => {\n              setIsDistributedDaily(target.checked);\n            }}\n            variantColor='tealVariant'\n          />\n        </FormControl>\n        <Button type='submit' variant='outline' variantColor='tealVariant' {...formItemProps}>\n          Add\n        </Button>\n      </form>\n    </Box>\n  );\n};\n"],"sourceRoot":""}