{"version":3,"sources":["utils/ramda-utils.ts","app/Menu.tsx","features/transactions/TransactionTypeFlag.tsx","features/calendar/calendarSlice-utils.ts","features/calendar/calendarSlice.ts","features/calendar/Day.tsx","features/calendar/Calendar.tsx","features/transactions/Transactions.tsx","app/theme.ts","serviceWorker.ts","store.ts","index.tsx","app/App.tsx","features/transactions/transactionsSlice.ts","features/transactions/Transaction.tsx","features/transactions/constants.ts"],"names":["start","step","stop","Menu","style","margin","padding","Heading","as","fontSize","hasIncomingNonDailyTransaction","transactions","transactionType","some","dueDayNumber","type","TransactionTypeFlag","hasIncomingNonDailyTransactions","hasOutgoingNonDailyTransactions","Box","display","position","right","Text","color","recalculateBalance","calendarState","action","shouldReset","firstDayNumber","config","produce","days","Object","values","forEach","day","balance","transaction","firstDay","dueDay","n","amount","isDistributedDaily","dayNumbers","range","fixedAmount","Math","abs","amountAccountedForAction","sign","dailyAmount","toFixed","dayNumber","index","initialState","reduce","number","slice","createSlice","name","reducers","changedFirstDayNumber","state","payload","nextFirstDayNumber","nextDays","extraReducers","transactionsSlice","actions","addTransaction","deleteTransaction","changeFirstDayNumber","dispatch","getState","selectFirstDayNumber","calendar","reducer","memoizedSelectDay","createSelector","memoizedSelectTransactionsForDay","selectTransactionsForDay","Day","useSelector","currency","selectCurrency","Popover","PseudoBox","height","key","minHeight","width","Button","bg","minWidth","zIndex","symbol","length","Divider","map","Transaction","Calendar","useDispatch","month","createMonth","flexDirection","FormControl","alignItems","FormLabel","whiteSpace","Select","onChange","nextDayNumber","target","value","isNaN","SimpleGrid","columns","TransactionForm","React","lazy","then","default","TransactionsList","Transactions","Suspense","fallback","Accordion","allowMultiple","allowToggle","flex","textAlign","marginBottom","paddingRight","orientation","paddingLeft","TEAL_VARIANT","chakraTheme","colors","cyan","theme","mergeDeepRight","tealVariant","acc","val","incoming","green","outgoing","red","Boolean","window","location","hostname","match","rootReducer","combineReducers","calendarReducer","transactionsReducer","persistConfig","storage","persistedReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","loading","ThemeProvider","CSSReset","Tabs","variant","variantColor","marginTop","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","rest","changeCurrency","CURRENCIES","selectTransactions","filter","isDeletable","transactionProps","memoizedDeleteTransaction","useCallback","marginLeft","aria-label","bottom","icon","onClick","size","Euro"],"mappings":"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","file":"static/js/main.7ea04017.chunk.js","sourcesContent":["import { map, range } from 'ramda';\n\n// Reference: https://github.com/ramda/ramda/wiki/Cookbook#create-an-incrementing-or-decrementing-range-of-numbers-with-a-step\nexport const rangeStep = (start: number, step: number, stop: number): number[] =>\n  map(n => start + step * n, range(0, (1 + (stop - start) / step) >>> 0));\n","import React, { FunctionComponent } from 'react';\n\nimport { Heading } from '@chakra-ui/core';\n\nexport const Menu: FunctionComponent<{}> = () => {\n  return (\n    <menu style={{ margin: '0 0 3rem', padding: 0 }}>\n      <Heading as='h1' fontSize={['xl', 'xl', '2xl', '3xl']}>\n        Monthly Budget Planner\n      </Heading>\n    </menu>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Box, Text } from '@chakra-ui/core';\n\nimport { Transaction as TransactionType } from './types';\n\nconst hasIncomingNonDailyTransaction = (\n  transactions: TransactionType[],\n  transactionType: TransactionType['type'],\n): boolean => transactions.some(({ dueDayNumber, type }) => dueDayNumber && type === transactionType);\n\ntype Props = {\n  transactions: TransactionType[];\n};\n\nexport const TransactionTypeFlag: FunctionComponent<Props> = ({ transactions }: Props) => {\n  const hasIncomingNonDailyTransactions = hasIncomingNonDailyTransaction(transactions, 'incoming');\n  const hasOutgoingNonDailyTransactions = hasIncomingNonDailyTransaction(transactions, 'outgoing');\n\n  return (\n    <Box display='flex' position='absolute' right='25%'>\n      {hasIncomingNonDailyTransactions && <Text color='transaction.incoming'>|</Text>}\n      {hasOutgoingNonDailyTransactions && <Text color='transaction.outgoing'>|</Text>}\n    </Box>\n  );\n};\n","import { createNextState as produce } from '@reduxjs/toolkit';\nimport { range } from 'ramda';\n\nimport { initialState } from './calendarSlice';\nimport { Transactions } from '../transactions/transactionsSlice';\n\nconst sortedDayNumbers = (firstDay: number, dueDay: number | null): number[] => {\n  if (firstDay === 1) {\n    return range(dueDay ?? 1, 32);\n  }\n\n  if (dueDay === null) {\n    return [...range(firstDay, 32), ...range(1, firstDay)];\n  }\n\n  if (dueDay < firstDay) {\n    return range(dueDay, firstDay);\n  } else {\n    return [...range(dueDay, 32), ...range(1, firstDay)];\n  }\n};\n\nconst switchSign = (n: number): number => (Math.sign(n) > 0 ? -Math.abs(n) : Math.abs(n));\n\nexport const recalculateBalance = (\n  calendarState: typeof initialState,\n  {\n    action,\n    shouldReset,\n    transactions,\n  }: {\n    action: 'added' | 'deleted';\n    shouldReset: boolean;\n    transactions: Transactions;\n  },\n): typeof initialState.days => {\n  const {\n    config: { firstDayNumber },\n  } = calendarState;\n\n  return produce(calendarState.days, days => {\n    if (shouldReset) {\n      Object.values(days).forEach(day => {\n        day.balance = 0;\n      });\n    }\n\n    Object.values(transactions).forEach(transaction => {\n      const { amount, dueDayNumber, isDistributedDaily, type } = transaction;\n\n      const dayNumbers = sortedDayNumbers(firstDayNumber, dueDayNumber);\n      const fixedAmount = type === 'incoming' ? amount : -Math.abs(amount);\n      const amountAccountedForAction = action === 'added' ? fixedAmount : switchSign(fixedAmount);\n\n      if (isDistributedDaily) {\n        const dailyAmount = +(amountAccountedForAction / 31).toFixed(2);\n\n        dayNumbers.forEach((dayNumber, index) => {\n          days[dayNumber].balance += dailyAmount * (index + 1);\n        });\n        return;\n      }\n\n      dayNumbers.forEach(dayNumber => {\n        days[dayNumber].balance += amountAccountedForAction;\n      });\n      return;\n    });\n  });\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { range } from 'ramda';\n\nimport { recalculateBalance } from './calendarSlice-utils';\nimport { slice as transactionsSlice, Transactions } from '../transactions/transactionsSlice';\n\nimport { Day as DayType } from './types';\nimport { AppDispatch, RootState } from '../../store';\n\nexport const initialState = {\n  config: {\n    firstDayNumber: 1 as DayType['number'],\n  },\n  days: range(1, 32).reduce(\n    (days, day) => ({\n      ...days,\n      [day]: {\n        balance: 0.0,\n        number: day,\n      },\n    }),\n    {},\n  ) as { [key: number]: DayType },\n};\n\nexport const slice = createSlice({\n  name: 'calendar',\n  initialState,\n  reducers: {\n    changedFirstDayNumber(\n      state,\n      action: PayloadAction<{ nextFirstDayNumber: DayType['number']; transactions: Transactions }>,\n    ): void {\n      const { nextFirstDayNumber, transactions } = action.payload;\n\n      state.config.firstDayNumber = nextFirstDayNumber;\n\n      const nextDays = recalculateBalance(state, { action: 'added', shouldReset: true, transactions });\n      state.days = nextDays;\n    },\n  },\n  extraReducers: {\n    [transactionsSlice.actions.addTransaction.type]: (\n      state: typeof initialState,\n      action: ReturnType<typeof transactionsSlice.actions.addTransaction>,\n    ): void => {\n      const transaction = action.payload;\n      const nextDays = recalculateBalance(state, {\n        action: 'added',\n        shouldReset: false,\n        transactions: { [transaction.name]: transaction },\n      });\n      state.days = nextDays;\n    },\n    [transactionsSlice.actions.deleteTransaction.type]: (\n      state: typeof initialState,\n      action: ReturnType<typeof transactionsSlice.actions.deleteTransaction>,\n    ): void => {\n      const transaction = action.payload;\n      const nextDays = recalculateBalance(state, {\n        action: 'deleted',\n        shouldReset: false,\n        transactions: { [transaction.name]: transaction },\n      });\n      state.days = nextDays;\n    },\n  },\n});\n\nconst thunks = {\n  changeFirstDayNumber: function(dayNumber: DayType['number']) {\n    return (dispatch: AppDispatch, getState: () => RootState): void => {\n      dispatch(\n        slice.actions.changedFirstDayNumber({\n          nextFirstDayNumber: dayNumber,\n          transactions: getState().transactions.transactions,\n        }),\n      );\n    };\n  },\n};\n\nexport const { changeFirstDayNumber } = thunks;\n\nexport const selectDay = (state: RootState, dayNumber: DayType['number']): DayType => state.calendar.days[dayNumber];\nexport const selectFirstDayNumber = (state: RootState): DayType['number'] => state.calendar.config.firstDayNumber;\n\nexport const reducer = slice.reducer;\n","import React, { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\nimport { createSelector } from '@reduxjs/toolkit';\nimport {\n  Button,\n  Divider,\n  Popover,\n  PopoverArrow,\n  PopoverBody,\n  PopoverCloseButton,\n  PopoverContent,\n  PopoverHeader,\n  PopoverTrigger,\n  PseudoBox,\n  Text,\n} from '@chakra-ui/core';\n\nimport { Transaction } from '../transactions/Transaction';\nimport { TransactionTypeFlag } from '../transactions/TransactionTypeFlag';\n\nimport { selectDay } from '../calendar/calendarSlice';\nimport { selectCurrency, selectTransactionsForDay } from '../transactions/transactionsSlice';\n\nimport { Day as DayType } from './types';\nimport { RootState } from '../../store';\n\nconst memoizedSelectDay = createSelector(selectDay, day => day);\nconst memoizedSelectTransactionsForDay = createSelector(selectTransactionsForDay, transactions => transactions);\n\ntype Props = {\n  dayNumber: DayType['number'];\n};\n\nexport const Day: FunctionComponent<Props> = ({ dayNumber }: Props) => {\n  const { balance, number } = useSelector((state: RootState) => memoizedSelectDay(state, dayNumber));\n  const transactions = useSelector((state: RootState) => memoizedSelectTransactionsForDay(state, dayNumber));\n  const currency = useSelector(selectCurrency);\n\n  return (\n    <Popover>\n      <PopoverTrigger>\n        <PseudoBox height='100%' key={number} minHeight={32} width='100%'>\n          <Button bg='transparent' height='100%' width='100%'>\n            {number}\n            <TransactionTypeFlag transactions={transactions} />\n          </Button>\n        </PseudoBox>\n      </PopoverTrigger>\n      <PopoverContent minWidth='20rem' zIndex={4}>\n        <PopoverArrow />\n        <PopoverCloseButton />\n        <PopoverHeader fontSize='lg'>Day {number}</PopoverHeader>\n        <PopoverBody>\n          <Text>\n            Balance:{' '}\n            <Text as='b' color={balance >= 0 ? 'transaction.incoming' : 'transaction.outgoing'}>\n              {balance.toFixed(2)}\n              {currency.symbol}\n            </Text>\n          </Text>\n          {transactions.length > 0 && <Divider />}\n          {transactions.map(transaction => (\n            <Transaction key={transaction.name} {...transaction} />\n          ))}\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { range } from 'ramda';\n\nimport { Box, FormControl, FormLabel, Select, SimpleGrid } from '@chakra-ui/core';\n\nimport { Day } from './Day';\n\nimport { changeFirstDayNumber, selectFirstDayNumber } from './calendarSlice';\n\nimport { Day as DayType } from './types';\n\nconst createMonth = (firstDayNumber: DayType['number']): DayType['number'][] => [\n  ...range(firstDayNumber, 32),\n  ...range(1, firstDayNumber),\n];\n\nexport const Calendar: FunctionComponent<{}> = () => {\n  const firstDayNumber = useSelector(selectFirstDayNumber);\n  const dispatch = useDispatch();\n\n  const month = createMonth(firstDayNumber);\n\n  return (\n    <Box margin='0 0 3rem'>\n      <Box display='flex' flexDirection={['row']}>\n        <FormControl alignItems='center' display='flex' margin='0 0 2rem'>\n          <FormLabel whiteSpace='nowrap'>First day of month:</FormLabel>\n          <Select\n            onChange={({ target }): void => {\n              const nextDayNumber: DayType['number'] = +target.value;\n\n              if (isNaN(nextDayNumber)) {\n                return;\n              }\n\n              dispatch(changeFirstDayNumber(nextDayNumber));\n            }}\n            value={firstDayNumber}\n          >\n            {range(1, 32).map(dayNumber => (\n              <option key={dayNumber} value={dayNumber}>\n                {dayNumber}\n              </option>\n            ))}\n          </Select>\n        </FormControl>\n      </Box>\n\n      <SimpleGrid columns={[3, 3, 7]}>\n        {month.map(dayNumber => (\n          <Day dayNumber={dayNumber} key={dayNumber} />\n        ))}\n      </SimpleGrid>\n    </Box>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport {\n  Accordion,\n  AccordionHeader,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Box,\n  Divider,\n} from '@chakra-ui/core';\n\nconst TransactionForm = React.lazy(() =>\n  import('./TransactionForm').then(({ TransactionForm }) => ({\n    default: TransactionForm,\n  })),\n);\n\nconst TransactionsList = React.lazy(() =>\n  import('./TransactionsList').then(({ TransactionsList }) => ({\n    default: TransactionsList,\n  })),\n);\n\nexport const Transactions: FunctionComponent<{}> = () => (\n  <React.Suspense fallback={null}>\n    <Box display={['block', 'block', 'none']}>\n      <Accordion allowMultiple allowToggle>\n        <AccordionItem>\n          <AccordionHeader>\n            <Box flex='1' textAlign='left'>\n              Add transaction\n            </Box>\n            <AccordionIcon />\n          </AccordionHeader>\n          <AccordionPanel>\n            <TransactionForm />\n          </AccordionPanel>\n        </AccordionItem>\n\n        <AccordionItem>\n          <AccordionHeader>\n            <Box flex='1' textAlign='left'>\n              List of transactions\n            </Box>\n            <AccordionIcon />\n          </AccordionHeader>\n          <AccordionPanel>\n            <TransactionsList />\n          </AccordionPanel>\n        </AccordionItem>\n      </Accordion>\n    </Box>\n\n    <Box display={['none', 'none', 'block']}>\n      <Box display='flex' marginBottom='2rem'>\n        <Box width='50%' paddingRight='6rem'>\n          <TransactionForm />\n        </Box>\n        <Divider orientation='vertical' />\n        <Box width='50%' paddingLeft='6rem'>\n          <TransactionsList />\n        </Box>\n      </Box>\n    </Box>\n  </React.Suspense>\n);\n","import { theme as chakraTheme, DefaultTheme } from '@chakra-ui/core';\nimport { mergeDeepRight } from 'ramda';\n\nimport { rangeStep } from '../utils/ramda-utils';\n\ntype TealVariant = {\n  100: string;\n  200: string;\n  300: string;\n  400: string;\n  500: string;\n  600: string;\n  700: string;\n  800: string;\n  900: string;\n};\n\ntype Transaction = {\n  incoming: string;\n  outgoing: string;\n};\n\ntype Theme = DefaultTheme & {\n  colors: {\n    tealVariant: TealVariant;\n    transaction: Transaction;\n  };\n};\n\nconst TEAL_VARIANT = chakraTheme.colors.cyan[500];\n\nexport const theme: Theme = mergeDeepRight(chakraTheme, {\n  colors: {\n    tealVariant: rangeStep(100, 100, 900).reduce(\n      (acc, val) => ({\n        ...acc,\n        [val]: TEAL_VARIANT,\n      }),\n      {} as TealVariant,\n    ),\n    transaction: {\n      incoming: chakraTheme.colors.green[500],\n      outgoing: chakraTheme.colors.red[500],\n    },\n  },\n});\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { combineReducers, configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { persistReducer, persistStore, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport { reducer as calendarReducer } from './features/calendar/calendarSlice';\r\nimport { reducer as transactionsReducer } from './features/transactions/transactionsSlice';\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nconst rootReducer = combineReducers({\r\n  calendar: calendarReducer,\r\n  transactions: transactionsReducer,\r\n});\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider as ReduxProvider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nimport { App } from './app/App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { persistor, store } from './store';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <ReduxProvider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <App />\r\n    </PersistGate>\r\n  </ReduxProvider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\nserviceWorker.unregister();\r\n","import React, { FunctionComponent } from 'react';\r\nimport { Box, CSSReset, DarkMode, Tab, TabList, TabPanel, TabPanels, Tabs, ThemeProvider } from '@chakra-ui/core';\r\n\r\nimport { Menu } from './Menu';\r\nimport { Calendar } from '../features/calendar/Calendar';\r\nimport { Transactions } from '../features/transactions/Transactions';\r\n\r\nimport { theme } from './theme';\r\n\r\nexport const App: FunctionComponent<{}> = () => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <DarkMode>\r\n        <CSSReset />\r\n        <Box minHeight='inherit' padding='2rem'>\r\n          <Box\r\n            display='flex'\r\n            flexDirection='column'\r\n            margin='0 auto'\r\n            width={[\r\n              '100%', // base\r\n              '90%', // 480px upwards\r\n              '90%', // 768px upwards\r\n              '80%', // 992px upwards\r\n              '70%',\r\n            ]}\r\n          >\r\n            <Menu />\r\n            <Tabs variant='enclosed' variantColor='tealVariant'>\r\n              <TabList>\r\n                <Tab>Calendar</Tab>\r\n                <Tab>Transactions</Tab>\r\n              </TabList>\r\n\r\n              <TabPanels marginTop='2rem'>\r\n                <TabPanel>\r\n                  <Calendar />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <Transactions />\r\n                </TabPanel>\r\n              </TabPanels>\r\n            </Tabs>\r\n          </Box>\r\n        </Box>\r\n      </DarkMode>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { RootState } from '../../store';\n\nimport { CURRENCIES } from './constants';\n\nimport { Currency, Transaction } from './types';\nimport { Day as DayType } from '../calendar/types';\n\ntype InitialState = {\n  config: { currency: Currency };\n  transactions: Transactions;\n};\n\nexport type Transactions = {\n  [key: string]: Transaction;\n};\n\nconst initialState: InitialState = {\n  config: {\n    currency: {\n      name: 'Euro',\n      symbol: '€',\n    },\n  },\n  transactions: {},\n};\n\nexport const slice = createSlice({\n  name: 'transactions',\n  initialState,\n  reducers: {\n    addTransaction: (state, action: PayloadAction<Transaction>): void => {\n      const { name, ...rest } = action.payload;\n\n      state.transactions[name] = {\n        name,\n        ...rest,\n      };\n    },\n    changeCurrency: (state, action: PayloadAction<Currency['name']>): void => {\n      state.config.currency = CURRENCIES[action.payload];\n    },\n    deleteTransaction: (state, action: PayloadAction<Transaction>): void => {\n      delete state.transactions[action.payload.name];\n    },\n  },\n});\n\nexport const selectCurrency = (state: RootState): Currency => state.transactions.config.currency;\nexport const selectTransactions = (state: RootState): Transactions => state.transactions.transactions;\nexport const selectTransactionsForDay = (state: RootState, dayNumber: DayType['number']): Transaction[] =>\n  Object.values(state.transactions.transactions).filter(\n    ({ dueDayNumber, isDistributedDaily }) => isDistributedDaily || dueDayNumber === dayNumber,\n  );\n\nexport const { addTransaction, changeCurrency, deleteTransaction } = slice.actions;\n\nexport const reducer = slice.reducer;\n","import React, { FunctionComponent, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { IconButton, Stat, StatArrow, StatHelpText, StatLabel, StatNumber, Text } from '@chakra-ui/core';\n\nimport { deleteTransaction, selectCurrency } from './transactionsSlice';\n\nimport { Transaction as TransactionType } from './types';\n\ntype Props = {\n  isDeletable?: boolean;\n} & TransactionType;\n\nconst SECONDARY_COLOR = 'gray.400';\n\nexport const Transaction: FunctionComponent<Props> = ({ isDeletable, ...transactionProps }: Props) => {\n  const dispatch = useDispatch();\n  const currency = useSelector(selectCurrency);\n\n  const memoizedDeleteTransaction = useCallback(() => {\n    dispatch(deleteTransaction(transactionProps));\n  }, [dispatch, transactionProps]);\n\n  const { amount, dueDayNumber, isDistributedDaily, name, type } = transactionProps;\n\n  return (\n    <Stat>\n      <StatLabel>\n        <Text as='span'>\n          {name}\n          <Text as='span' color={SECONDARY_COLOR} marginLeft={1}>\n            {dueDayNumber ? `[day ${dueDayNumber}]` : '[daily]'}\n          </Text>\n          {isDeletable && (\n            <IconButton\n              aria-label='delete transaction'\n              bottom={'1px'}\n              icon='delete'\n              marginLeft={2}\n              onClick={memoizedDeleteTransaction}\n              size='xs'\n              variant='ghost'\n              color={SECONDARY_COLOR}\n            />\n          )}\n        </Text>\n      </StatLabel>\n      <StatHelpText alignItems='center' display='flex'>\n        <StatArrow type={type === 'incoming' ? 'increase' : 'decrease'} />\n        <StatNumber as='span'>\n          {isDistributedDaily ? (amount / 31).toFixed(2) : amount.toFixed(2)}\n          {currency.symbol}\n        </StatNumber>\n      </StatHelpText>\n    </Stat>\n  );\n};\n","import { Currency } from './types';\n\nexport const CURRENCIES: { [key in Currency['name']]: Currency } = {\n  'Australian Dollar': {\n    name: 'Australian Dollar',\n    symbol: 'AU$',\n  },\n  'British Pound': {\n    name: 'British Pound',\n    symbol: '£',\n  },\n  'Canadian Dollar': {\n    name: 'Canadian Dollar',\n    symbol: 'CA$',\n  },\n  Euro: {\n    name: 'Euro',\n    symbol: '€',\n  },\n  'Japanese Yen': {\n    name: 'Japanese Yen',\n    symbol: '¥',\n  },\n  'Swiss Franc': { name: 'Swiss Franc', symbol: 'CHF' },\n  'US Dollar': {\n    name: 'US Dollar',\n    symbol: '$',\n  },\n};\n"],"sourceRoot":""}