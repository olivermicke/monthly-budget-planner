{"version":3,"sources":["utils/ramda-utils.ts","app/Menu.tsx","features/transactions/constants.ts","features/transactions/transactionsSlice.ts","features/transactions/Transaction.tsx","features/transactions/TransactionTypeFlag.tsx","features/calendar/calendarSlice-utils.ts","features/calendar/calendarSlice.ts","features/calendar/Day.tsx","features/calendar/Calendar.tsx","features/transactions/TransactionForm.tsx","features/transactions/TransactionsConfig.tsx","features/transactions/TransactionsList.tsx","features/transactions/Transactions.tsx","app/theme.ts","serviceWorker.ts","store.ts","index.tsx","app/App.tsx"],"names":["start","step","stop","Menu","style","margin","padding","Heading","as","fontSize","CURRENCIES","name","symbol","Euro","slice","createSlice","initialState","config","currency","transactions","reducers","addTransaction","state","action","payload","rest","changeCurrency","deleteTransaction","selectCurrency","selectTransactions","actions","reducer","Transaction","isDeletable","transactionProps","dispatch","useDispatch","useSelector","memoizedDeleteTransaction","useCallback","amount","dueDayNumber","isDistributedDaily","type","Stat","Text","color","marginLeft","IconButton","aria-label","bottom","icon","onClick","size","variant","alignItems","display","toFixed","hasIncomingNonDailyTransaction","transactionType","some","TransactionTypeFlag","hasIncomingNonDailyTransactions","hasOutgoingNonDailyTransactions","Box","position","right","recalculateBalance","calendarState","shouldReset","firstDayNumber","produce","days","Object","values","forEach","day","balance","transaction","firstDay","dueDay","n","dayNumbers","range","fixedAmount","Math","abs","amountAccountedForAction","sign","dailyAmount","dayNumber","index","reduce","number","changedFirstDayNumber","nextFirstDayNumber","nextDays","extraReducers","transactionsSlice","changeFirstDayNumber","getState","selectFirstDayNumber","calendar","memoizedSelectDay","createSelector","memoizedSelectTransactionsForDay","filter","Day","Popover","PseudoBox","height","key","minHeight","width","Button","bg","minWidth","zIndex","length","Divider","map","Calendar","month","createMonth","flexDirection","FormControl","FormLabel","whiteSpace","Select","onChange","nextDayNumber","target","value","isNaN","SimpleGrid","columns","formItemProps","marginTop","TransactionForm","useState","setName","setAmount","setDueDayNumber","setIsDistributedDaily","setType","marginBottom","onSubmit","event","preventDefault","roundedAmount","Input","isRequired","placeholder","NumberInput","flex","marginRight","max","Number","MAX_SAFE_INTEGER","min","FormHelperText","isDisabled","Checkbox","isChecked","checked","variantColor","TransactionsConfig","boxProps","TransactionsList","transactionsValues","Transactions","Accordion","allowMultiple","allowToggle","textAlign","paddingRight","orientation","paddingLeft","TEAL_VARIANT","chakraTheme","colors","cyan","theme","mergeDeepRight","tealVariant","acc","val","incoming","green","outgoing","red","Boolean","window","location","hostname","match","rootReducer","combineReducers","calendarReducer","transactionsReducer","persistConfig","storage","persistedReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","loading","ThemeProvider","CSSReset","Tabs","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1e267c4b.chunk.js","sourcesContent":["import { map, range } from 'ramda';\n\n// Reference: https://github.com/ramda/ramda/wiki/Cookbook#create-an-incrementing-or-decrementing-range-of-numbers-with-a-step\nexport const rangeStep = (start: number, step: number, stop: number): number[] =>\n  map(n => start + step * n, range(0, (1 + (stop - start) / step) >>> 0));\n","import React, { FunctionComponent } from 'react';\n\nimport { Heading } from '@chakra-ui/core';\n\nexport const Menu: FunctionComponent<{}> = () => {\n  return (\n    <menu style={{ margin: '0 0 3rem', padding: 0 }}>\n      <Heading as='h1' fontSize={['xl', 'xl', '2xl', '3xl']}>\n        Monthly Budget Planner\n      </Heading>\n    </menu>\n  );\n};\n","import { Currency } from './types';\n\nexport const CURRENCIES: { [key in Currency['name']]: Currency } = {\n  'Australian Dollar': {\n    name: 'Australian Dollar',\n    symbol: 'AU$',\n  },\n  'British Pound': {\n    name: 'British Pound',\n    symbol: '£',\n  },\n  'Canadian Dollar': {\n    name: 'Canadian Dollar',\n    symbol: 'CA$',\n  },\n  Euro: {\n    name: 'Euro',\n    symbol: '€',\n  },\n  'Japanese Yen': {\n    name: 'Japanese Yen',\n    symbol: '¥',\n  },\n  'Swiss Franc': { name: 'Swiss Franc', symbol: 'CHF' },\n  'US Dollar': {\n    name: 'US Dollar',\n    symbol: '$',\n  },\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { RootState } from '../../store';\n\nimport { CURRENCIES } from './constants';\n\nimport { Currency, Transaction } from './types';\nimport { Day as DayType } from '../calendar/types';\n\ntype InitialState = {\n  config: { currency: Currency };\n  transactions: Transactions;\n};\n\nexport type Transactions = {\n  [key: string]: Transaction;\n};\n\nconst initialState: InitialState = {\n  config: {\n    currency: {\n      name: 'Euro',\n      symbol: '€',\n    },\n  },\n  transactions: {},\n};\n\nexport const slice = createSlice({\n  name: 'transactions',\n  initialState,\n  reducers: {\n    addTransaction: (state, action: PayloadAction<Transaction>): void => {\n      const { name, ...rest } = action.payload;\n\n      state.transactions[name] = {\n        name,\n        ...rest,\n      };\n    },\n    changeCurrency: (state, action: PayloadAction<Currency['name']>): void => {\n      state.config.currency = CURRENCIES[action.payload];\n    },\n    deleteTransaction: (state, action: PayloadAction<Transaction>): void => {\n      delete state.transactions[action.payload.name];\n    },\n  },\n});\n\nexport const selectCurrency = (state: RootState): Currency => state.transactions.config.currency;\nexport const selectTransactions = (state: RootState): Transactions => state.transactions.transactions;\nexport const selectTransactionsForDay = (state: RootState, dayNumber: DayType['number']): Transaction[] =>\n  Object.values(state.transactions.transactions).filter(\n    ({ dueDayNumber, isDistributedDaily }) => isDistributedDaily || dueDayNumber === dayNumber,\n  );\n\nexport const { addTransaction, changeCurrency, deleteTransaction } = slice.actions;\n\nexport const reducer = slice.reducer;\n","import React, { FunctionComponent, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { IconButton, Stat, StatArrow, StatHelpText, StatLabel, StatNumber, Text } from '@chakra-ui/core';\n\nimport { deleteTransaction, selectCurrency } from './transactionsSlice';\n\nimport { Transaction as TransactionType } from './types';\n\ntype Props = {\n  isDeletable?: boolean;\n} & TransactionType;\n\nconst SECONDARY_COLOR = 'gray.400';\n\nexport const Transaction: FunctionComponent<Props> = ({ isDeletable, ...transactionProps }: Props) => {\n  const dispatch = useDispatch();\n  const currency = useSelector(selectCurrency);\n\n  const memoizedDeleteTransaction = useCallback(() => {\n    dispatch(deleteTransaction(transactionProps));\n  }, [dispatch, transactionProps]);\n\n  const { amount, dueDayNumber, isDistributedDaily, name, type } = transactionProps;\n\n  return (\n    <Stat>\n      <StatLabel>\n        <Text as='span'>\n          {name}\n          <Text as='span' color={SECONDARY_COLOR} marginLeft={1}>\n            {dueDayNumber ? `[day ${dueDayNumber}]` : '[daily]'}\n          </Text>\n          {isDeletable && (\n            <IconButton\n              aria-label='delete transaction'\n              bottom={'1px'}\n              icon='delete'\n              marginLeft={2}\n              onClick={memoizedDeleteTransaction}\n              size='xs'\n              variant='ghost'\n              color={SECONDARY_COLOR}\n            />\n          )}\n        </Text>\n      </StatLabel>\n      <StatHelpText alignItems='center' display='flex'>\n        <StatArrow type={type === 'incoming' ? 'increase' : 'decrease'} />\n        <StatNumber as='span'>\n          {isDistributedDaily ? (amount / 31).toFixed(2) : amount.toFixed(2)}\n          {currency.symbol}\n        </StatNumber>\n      </StatHelpText>\n    </Stat>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Box, Text } from '@chakra-ui/core';\n\nimport { Transaction as TransactionType } from './types';\n\nconst hasIncomingNonDailyTransaction = (\n  transactions: TransactionType[],\n  transactionType: TransactionType['type'],\n): boolean => transactions.some(({ dueDayNumber, type }) => dueDayNumber && type === transactionType);\n\ntype Props = {\n  transactions: TransactionType[];\n};\n\nexport const TransactionTypeFlag: FunctionComponent<Props> = ({ transactions }: Props) => {\n  const hasIncomingNonDailyTransactions = hasIncomingNonDailyTransaction(transactions, 'incoming');\n  const hasOutgoingNonDailyTransactions = hasIncomingNonDailyTransaction(transactions, 'outgoing');\n\n  return (\n    <Box display='flex' position='absolute' right='25%'>\n      {hasIncomingNonDailyTransactions && <Text color='transaction.incoming'>|</Text>}\n      {hasOutgoingNonDailyTransactions && <Text color='transaction.outgoing'>|</Text>}\n    </Box>\n  );\n};\n","import { createNextState as produce } from '@reduxjs/toolkit';\nimport { range } from 'ramda';\n\nimport { initialState } from './calendarSlice';\nimport { Transactions } from '../transactions/transactionsSlice';\n\nconst sortedDayNumbers = (firstDay: number, dueDay: number | null): number[] => {\n  if (firstDay === 1) {\n    return range(dueDay ?? 1, 32);\n  }\n\n  if (dueDay === null) {\n    return [...range(firstDay, 32), ...range(1, firstDay)];\n  }\n\n  if (dueDay < firstDay) {\n    return range(dueDay, firstDay);\n  } else {\n    return [...range(dueDay, 32), ...range(1, firstDay)];\n  }\n};\n\nconst switchSign = (n: number): number => (Math.sign(n) > 0 ? -Math.abs(n) : Math.abs(n));\n\nexport const recalculateBalance = (\n  calendarState: typeof initialState,\n  {\n    action,\n    shouldReset,\n    transactions,\n  }: {\n    action: 'added' | 'deleted';\n    shouldReset: boolean;\n    transactions: Transactions;\n  },\n): typeof initialState.days => {\n  const {\n    config: { firstDayNumber },\n  } = calendarState;\n\n  return produce(calendarState.days, days => {\n    if (shouldReset) {\n      Object.values(days).forEach(day => {\n        day.balance = 0;\n      });\n    }\n\n    Object.values(transactions).forEach(transaction => {\n      const { amount, dueDayNumber, isDistributedDaily, type } = transaction;\n\n      const dayNumbers = sortedDayNumbers(firstDayNumber, dueDayNumber);\n      const fixedAmount = type === 'incoming' ? amount : -Math.abs(amount);\n      const amountAccountedForAction = action === 'added' ? fixedAmount : switchSign(fixedAmount);\n\n      if (isDistributedDaily) {\n        const dailyAmount = +(amountAccountedForAction / 31).toFixed(2);\n\n        dayNumbers.forEach((dayNumber, index) => {\n          days[dayNumber].balance += dailyAmount * (index + 1);\n        });\n        return;\n      }\n\n      dayNumbers.forEach(dayNumber => {\n        days[dayNumber].balance += amountAccountedForAction;\n      });\n      return;\n    });\n  });\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { range } from 'ramda';\n\nimport { recalculateBalance } from './calendarSlice-utils';\nimport { slice as transactionsSlice, Transactions } from '../transactions/transactionsSlice';\n\nimport { Day as DayType } from './types';\nimport { AppDispatch, RootState } from '../../store';\n\nexport const initialState = {\n  config: {\n    firstDayNumber: 1 as DayType['number'],\n  },\n  days: range(1, 32).reduce(\n    (days, day) => ({\n      ...days,\n      [day]: {\n        balance: 0.0,\n        number: day,\n      },\n    }),\n    {},\n  ) as { [key: number]: DayType },\n};\n\nexport const slice = createSlice({\n  name: 'calendar',\n  initialState,\n  reducers: {\n    changedFirstDayNumber(\n      state,\n      action: PayloadAction<{ nextFirstDayNumber: DayType['number']; transactions: Transactions }>,\n    ): void {\n      const { nextFirstDayNumber, transactions } = action.payload;\n\n      state.config.firstDayNumber = nextFirstDayNumber;\n\n      const nextDays = recalculateBalance(state, { action: 'added', shouldReset: true, transactions });\n      state.days = nextDays;\n    },\n  },\n  extraReducers: {\n    [transactionsSlice.actions.addTransaction.type]: (\n      state: typeof initialState,\n      action: ReturnType<typeof transactionsSlice.actions.addTransaction>,\n    ): void => {\n      const transaction = action.payload;\n      const nextDays = recalculateBalance(state, {\n        action: 'added',\n        shouldReset: false,\n        transactions: { [transaction.name]: transaction },\n      });\n      state.days = nextDays;\n    },\n    [transactionsSlice.actions.deleteTransaction.type]: (\n      state: typeof initialState,\n      action: ReturnType<typeof transactionsSlice.actions.deleteTransaction>,\n    ): void => {\n      const transaction = action.payload;\n      const nextDays = recalculateBalance(state, {\n        action: 'deleted',\n        shouldReset: false,\n        transactions: { [transaction.name]: transaction },\n      });\n      state.days = nextDays;\n    },\n  },\n});\n\nconst thunks = {\n  changeFirstDayNumber: function(dayNumber: DayType['number']) {\n    return (dispatch: AppDispatch, getState: () => RootState): void => {\n      dispatch(\n        slice.actions.changedFirstDayNumber({\n          nextFirstDayNumber: dayNumber,\n          transactions: getState().transactions.transactions,\n        }),\n      );\n    };\n  },\n};\n\nexport const { changeFirstDayNumber } = thunks;\n\nexport const selectDay = (state: RootState, dayNumber: DayType['number']): DayType => state.calendar.days[dayNumber];\nexport const selectFirstDayNumber = (state: RootState): DayType['number'] => state.calendar.config.firstDayNumber;\n\nexport const reducer = slice.reducer;\n","import React, { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\nimport { createSelector } from '@reduxjs/toolkit';\nimport {\n  Button,\n  Divider,\n  Popover,\n  PopoverArrow,\n  PopoverBody,\n  PopoverCloseButton,\n  PopoverContent,\n  PopoverHeader,\n  PopoverTrigger,\n  PseudoBox,\n  Text,\n} from '@chakra-ui/core';\n\nimport { Transaction } from '../transactions/Transaction';\nimport { TransactionTypeFlag } from '../transactions/TransactionTypeFlag';\n\nimport { selectDay } from '../calendar/calendarSlice';\nimport { selectCurrency, selectTransactionsForDay } from '../transactions/transactionsSlice';\n\nimport { Day as DayType } from './types';\nimport { RootState } from '../../store';\n\nconst memoizedSelectDay = createSelector(selectDay, day => day);\nconst memoizedSelectTransactionsForDay = createSelector(selectTransactionsForDay, transactions => transactions);\n\ntype Props = {\n  dayNumber: DayType['number'];\n};\n\nexport const Day: FunctionComponent<Props> = ({ dayNumber }: Props) => {\n  const { balance, number } = useSelector((state: RootState) => memoizedSelectDay(state, dayNumber));\n  const transactions = useSelector((state: RootState) => memoizedSelectTransactionsForDay(state, dayNumber));\n  const currency = useSelector(selectCurrency);\n\n  return (\n    <Popover>\n      <PopoverTrigger>\n        <PseudoBox height='100%' key={number} minHeight={32} width='100%'>\n          <Button bg='transparent' height='100%' width='100%'>\n            {number}\n            <TransactionTypeFlag transactions={transactions} />\n          </Button>\n        </PseudoBox>\n      </PopoverTrigger>\n      <PopoverContent minWidth='20rem' zIndex={4}>\n        <PopoverArrow />\n        <PopoverCloseButton />\n        <PopoverHeader fontSize='lg'>Day {number}</PopoverHeader>\n        <PopoverBody>\n          <Text>\n            Balance:{' '}\n            <Text as='b' color={balance >= 0 ? 'transaction.incoming' : 'transaction.outgoing'}>\n              {balance.toFixed(2)}\n              {currency.symbol}\n            </Text>\n          </Text>\n          {transactions.length > 0 && <Divider />}\n          {transactions.map(transaction => (\n            <Transaction key={transaction.name} {...transaction} />\n          ))}\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { range } from 'ramda';\n\nimport { Box, FormControl, FormLabel, Select, SimpleGrid } from '@chakra-ui/core';\n\nimport { Day } from './Day';\n\nimport { changeFirstDayNumber, selectFirstDayNumber } from './calendarSlice';\n\nimport { Day as DayType } from './types';\n\nconst createMonth = (firstDayNumber: DayType['number']): DayType['number'][] => [\n  ...range(firstDayNumber, 32),\n  ...range(1, firstDayNumber),\n];\n\nexport const Calendar: FunctionComponent<{}> = () => {\n  const firstDayNumber = useSelector(selectFirstDayNumber);\n  const dispatch = useDispatch();\n\n  const month = createMonth(firstDayNumber);\n\n  return (\n    <Box margin='0 0 3rem'>\n      <Box display='flex' flexDirection={['row']}>\n        <FormControl alignItems='center' display='flex' margin='0 0 2rem'>\n          <FormLabel whiteSpace='nowrap'>First day of month:</FormLabel>\n          <Select\n            onChange={({ target }): void => {\n              const nextDayNumber: DayType['number'] = +target.value;\n\n              if (isNaN(nextDayNumber)) {\n                return;\n              }\n\n              dispatch(changeFirstDayNumber(nextDayNumber));\n            }}\n            value={firstDayNumber}\n          >\n            {range(1, 32).map(dayNumber => (\n              <option key={dayNumber} value={dayNumber}>\n                {dayNumber}\n              </option>\n            ))}\n          </Select>\n        </FormControl>\n      </Box>\n\n      <SimpleGrid columns={[3, 3, 7]}>\n        {month.map(dayNumber => (\n          <Day dayNumber={dayNumber} key={dayNumber} />\n        ))}\n      </SimpleGrid>\n    </Box>\n  );\n};\n","import React, { FunctionComponent, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { range } from 'ramda';\nimport {\n  Box,\n  Button,\n  Checkbox,\n  FormControl,\n  FormHelperText,\n  FormLabel,\n  Heading,\n  Input,\n  NumberInput,\n  NumberInputField,\n  Select,\n} from '@chakra-ui/core';\n\nimport { addTransaction, selectCurrency } from './transactionsSlice';\n\nimport { Transaction } from './types';\n\nconst DEFAULT_NAME = '';\nconst DEFAULT_AMOUNT = 10;\nconst DEFAULT_DUE_DAY_NUMBER = 1;\nconst DEFAULT_IS_DISTRIBUTED_DAILY = false;\nconst DEFAULT_TYPE: Transaction['type'] = 'outgoing';\n\nconst formItemProps = {\n  marginTop: ['1rem', '1rem', '2rem'],\n};\n\nexport const TransactionForm: FunctionComponent<{}> = () => {\n  const currency = useSelector(selectCurrency);\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState(DEFAULT_NAME);\n  const [amount, setAmount] = useState(DEFAULT_AMOUNT);\n  const [dueDayNumber, setDueDayNumber] = useState(DEFAULT_DUE_DAY_NUMBER);\n  const [isDistributedDaily, setIsDistributedDaily] = useState(DEFAULT_IS_DISTRIBUTED_DAILY);\n  const [type, setType] = useState<Transaction['type']>(DEFAULT_TYPE);\n\n  return (\n    <Box marginBottom={['2rem', '2rem', 0]}>\n      <form\n        onSubmit={(event): void => {\n          event.preventDefault();\n\n          const roundedAmount = +amount.toFixed(2);\n\n          dispatch(\n            addTransaction({\n              amount: type === 'incoming' ? roundedAmount : -Math.abs(roundedAmount),\n              dueDayNumber: isDistributedDaily ? null : dueDayNumber,\n              isDistributedDaily,\n              name,\n              type,\n            }),\n          );\n\n          setAmount(DEFAULT_AMOUNT);\n          setDueDayNumber(DEFAULT_DUE_DAY_NUMBER);\n          setIsDistributedDaily(DEFAULT_IS_DISTRIBUTED_DAILY);\n          setName(DEFAULT_NAME);\n          setType(DEFAULT_TYPE);\n        }}\n      >\n        <Heading as='h3' display={['none', 'none', 'block']} size='md'>\n          Add transaction\n        </Heading>\n        <FormControl {...formItemProps}>\n          <FormLabel>Name:</FormLabel>\n          <Input\n            isRequired\n            // @ts-ignore\n            onChange={({ target }): void => {\n              setName(target.value);\n            }}\n            placeholder='e.g. \"Electricity Bill\"'\n            type='text'\n            value={name}\n          />\n        </FormControl>\n        <FormControl {...formItemProps}>\n          <FormLabel>Type:</FormLabel>\n          <Select\n            onChange={({ target }): void => {\n              setType(target.value as Transaction['type']);\n            }}\n            value={type}\n          >\n            <option value={'incoming'}>Incoming</option>\n            <option value={'outgoing'}>Outgoing</option>\n          </Select>\n        </FormControl>\n        <FormControl {...formItemProps}>\n          <FormLabel>Amount in {currency.symbol}:</FormLabel>\n          <Box display='flex'>\n            <NumberInput\n              flex={1}\n              marginRight='2rem'\n              max={Number.MAX_SAFE_INTEGER}\n              min={0.01}\n              // @ts-ignore\n              onChange={(amount: number): void => {\n                setAmount(amount);\n              }}\n              value={amount}\n            >\n              <NumberInputField />\n            </NumberInput>\n            <FormHelperText whiteSpace='nowrap'>e.g. 119.99</FormHelperText>\n          </Box>\n        </FormControl>\n        <FormControl {...formItemProps}>\n          <FormLabel>Due on day:</FormLabel>\n          <Select\n            isDisabled={isDistributedDaily}\n            onChange={({ target }): void => {\n              const nextDayNumber: NonNullable<Transaction['dueDayNumber']> = +target.value;\n\n              if (isNaN(nextDayNumber)) {\n                return;\n              }\n\n              setDueDayNumber(nextDayNumber);\n            }}\n            value={dueDayNumber}\n          >\n            {range(1, 32).map(dayNumber => (\n              <option key={dayNumber} value={dayNumber}>\n                {dayNumber}\n              </option>\n            ))}\n          </Select>\n        </FormControl>\n        <FormControl display='flex' {...formItemProps}>\n          <FormLabel>Distribute over whole month:</FormLabel>\n          <Checkbox\n            isChecked={isDistributedDaily}\n            onChange={({ target }): void => {\n              setIsDistributedDaily(target.checked);\n            }}\n            variantColor='tealVariant'\n          />\n        </FormControl>\n        <Button type='submit' variant='outline' variantColor='tealVariant' {...formItemProps}>\n          Add\n        </Button>\n      </form>\n    </Box>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormControl, FormLabel, Select } from '@chakra-ui/core';\n\nimport { changeCurrency, selectCurrency } from './transactionsSlice';\n\nimport { CURRENCIES } from './constants';\n\nimport { Currency } from './types';\n\nexport const TransactionsConfig: FunctionComponent<{}> = () => {\n  const currency = useSelector(selectCurrency);\n  const dispatch = useDispatch();\n\n  return (\n    <FormControl marginTop={['1rem', '1rem', '2rem']}>\n      <FormLabel>Currency:</FormLabel>\n      <Select\n        onChange={({ target }): void => {\n          dispatch(changeCurrency(target.value as Currency['name']));\n        }}\n        value={currency.name}\n      >\n        {Object.values(CURRENCIES).map(({ name }) => (\n          <option key={name} value={name}>\n            {name}\n          </option>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Box, Heading } from '@chakra-ui/core';\n\nimport { Transaction } from './Transaction';\nimport { TransactionsConfig } from './TransactionsConfig';\n\nimport { selectTransactions } from './transactionsSlice';\n\nconst boxProps = { marginTop: ['1rem', '1rem', '2rem'] };\n\nexport const TransactionsList: FunctionComponent<{}> = () => {\n  const transactions = useSelector(selectTransactions);\n\n  const transactionsValues = Object.values(transactions);\n\n  return (\n    <Box>\n      <Heading as='h3' display={['none', 'none', 'block']} size='md'>\n        Transactions\n      </Heading>\n\n      <TransactionsConfig />\n\n      {transactionsValues.length === 0 ? (\n        <Box marginTop='2rem' {...boxProps}>\n          No transactions added yet.\n        </Box>\n      ) : (\n        transactionsValues.map(transaction => (\n          <Box key={transaction.name} marginTop='2rem'>\n            <Transaction isDeletable {...transaction} />\n          </Box>\n        ))\n      )}\n    </Box>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport {\n  Accordion,\n  AccordionHeader,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Box,\n  Divider,\n} from '@chakra-ui/core';\n\nimport { TransactionForm } from './TransactionForm';\nimport { TransactionsList } from './TransactionsList';\n\nexport const Transactions: FunctionComponent<{}> = () => (\n  <>\n    <Box display={['block', 'block', 'none']}>\n      <Accordion allowMultiple allowToggle>\n        <AccordionItem>\n          <AccordionHeader>\n            <Box flex='1' textAlign='left'>\n              Add transaction\n            </Box>\n            <AccordionIcon />\n          </AccordionHeader>\n          <AccordionPanel>\n            <TransactionForm />\n          </AccordionPanel>\n        </AccordionItem>\n\n        <AccordionItem>\n          <AccordionHeader>\n            <Box flex='1' textAlign='left'>\n              List of transactions\n            </Box>\n            <AccordionIcon />\n          </AccordionHeader>\n          <AccordionPanel>\n            <TransactionsList />\n          </AccordionPanel>\n        </AccordionItem>\n      </Accordion>\n    </Box>\n\n    <Box display={['none', 'none', 'block']}>\n      <Box display='flex' marginBottom='2rem'>\n        <Box width='50%' paddingRight='6rem'>\n          <TransactionForm />\n        </Box>\n        <Divider orientation='vertical' />\n        <Box width='50%' paddingLeft='6rem'>\n          <TransactionsList />\n        </Box>\n      </Box>\n    </Box>\n  </>\n);\n","import { theme as chakraTheme, DefaultTheme } from '@chakra-ui/core';\nimport { mergeDeepRight } from 'ramda';\n\nimport { rangeStep } from '../utils/ramda-utils';\n\ntype TealVariant = {\n  100: string;\n  200: string;\n  300: string;\n  400: string;\n  500: string;\n  600: string;\n  700: string;\n  800: string;\n  900: string;\n};\n\ntype Transaction = {\n  incoming: string;\n  outgoing: string;\n};\n\ntype Theme = DefaultTheme & {\n  colors: {\n    tealVariant: TealVariant;\n    transaction: Transaction;\n  };\n};\n\nconst TEAL_VARIANT = chakraTheme.colors.cyan[500];\n\nexport const theme: Theme = mergeDeepRight(chakraTheme, {\n  colors: {\n    tealVariant: rangeStep(100, 100, 900).reduce(\n      (acc, val) => ({\n        ...acc,\n        [val]: TEAL_VARIANT,\n      }),\n      {} as TealVariant,\n    ),\n    transaction: {\n      incoming: chakraTheme.colors.green[500],\n      outgoing: chakraTheme.colors.red[500],\n    },\n  },\n});\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { combineReducers, configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { persistReducer, persistStore, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport { reducer as calendarReducer } from './features/calendar/calendarSlice';\r\nimport { reducer as transactionsReducer } from './features/transactions/transactionsSlice';\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nconst rootReducer = combineReducers({\r\n  calendar: calendarReducer,\r\n  transactions: transactionsReducer,\r\n});\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider as ReduxProvider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nimport { App } from './app/App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { persistor, store } from './store';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <ReduxProvider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <App />\r\n    </PersistGate>\r\n  </ReduxProvider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\nserviceWorker.unregister();\r\n","import React, { FunctionComponent } from 'react';\r\nimport { Box, CSSReset, DarkMode, Tab, TabList, TabPanel, TabPanels, Tabs, ThemeProvider } from '@chakra-ui/core';\r\n\r\nimport { Menu } from './Menu';\r\nimport { Calendar } from '../features/calendar/Calendar';\r\nimport { Transactions } from '../features/transactions/Transactions';\r\n\r\nimport { theme } from './theme';\r\n\r\nexport const App: FunctionComponent<{}> = () => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <DarkMode>\r\n        <CSSReset />\r\n        <Box minHeight='inherit' padding='2rem'>\r\n          <Box\r\n            display='flex'\r\n            flexDirection='column'\r\n            margin='0 auto'\r\n            width={[\r\n              '100%', // base\r\n              '90%', // 480px upwards\r\n              '90%', // 768px upwards\r\n              '80%', // 992px upwards\r\n              '70%',\r\n            ]}\r\n          >\r\n            <Menu />\r\n            <Tabs variant='enclosed' variantColor='tealVariant'>\r\n              <TabList>\r\n                <Tab>Calendar</Tab>\r\n                <Tab>Transactions</Tab>\r\n              </TabList>\r\n\r\n              <TabPanels marginTop='2rem'>\r\n                <TabPanel>\r\n                  <Calendar />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <Transactions />\r\n                </TabPanel>\r\n              </TabPanels>\r\n            </Tabs>\r\n          </Box>\r\n        </Box>\r\n      </DarkMode>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n"],"sourceRoot":""}